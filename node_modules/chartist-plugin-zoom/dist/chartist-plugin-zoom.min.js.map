{"version":3,"file":"chartist-plugin-zoom.min.js","sources":["chartist-plugin-zoom.js"],"names":["root","factory","define","amd","returnExportsGlobal","exports","module","this","Chartist","require","window","document","hide","rect","attr","style","show","getRect","firstPoint","secondPoint","x","y","width","height","position","event","svg","transform","clientX","clientY","svgElement","tagName","ownerSVGElement","matrix","getScreenCTM","point","createSVGPoint","matrixTransform","inverse","project","value","axis","max","bounds","min","scale","type","base","Math","pow","baseLog","axisLength","range","val","log","defaultOptions","pointClipOffset","plugins","zoom","options","extend","chart","copyTouch","touch","p","id","identifier","ongoingTouchIndexById","idToFind","i","ongoingTouches","length","onTouchStart","touches","changedTouches","push","onTouchMove","idx","splice","preventDefault","onTouchCancel","removeTouches","onTouchEnd","zoomIn","onMouseDown","button","isInRect","chartRect","downPosition","x1","x2","y2","y1","onMouseUp","box","resetOnRightMouseBtn","reset","axisX","highLow","low","high","axisY","update","data","onZoom","onMouseMove","Line","on","mask","element","clip-path","addMask","offset","defs","elem","fill","handler","addEventListener","_node","querySelector","tooltips"],"mappings":"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","sourcesContent":["(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], function () {\n      return (root.returnExportsGlobal = factory());\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like enviroments that support module.exports,\n    // like Node.\n    module.exports = factory();\n  } else {\n    root['Chartist.plugins.zoom'] = factory();\n  }\n}(this, function () {\n\n  (function (root, factory) {\r\n    'use strict';\r\n\r\n    if (typeof define === 'function' && define.amd) {\r\n      // AMD. Register as an anonymous module.\r\n      define(['chartist'], function (Chartist) {\r\n        return (root.returnExportsGlobal = factory(Chartist));\r\n      });\r\n    } else if (typeof exports === 'object') {\r\n      // Node. Does not work with strict CommonJS, but\r\n      // only CommonJS-like enviroments that support module.exports,\r\n      // like Node.\r\n      module.exports = factory(require('chartist'));\r\n    } else {\r\n      root['Chartist.plugins.zoom'] = factory(Chartist);\r\n    }\r\n  }(this, function (Chartist) {\r\n    'use strict';\r\n    /**\r\n     * Chartist.js zoom plugin.\r\n     *\r\n     */\r\n    (function (window, document, Chartist) {\r\n\r\n      var defaultOptions = {\r\n        // onZoom\r\n        // resetOnRightMouseBtn\r\n        pointClipOffset: 5\r\n      };\r\n\r\n      Chartist.plugins = Chartist.plugins || {};\r\n      Chartist.plugins.zoom = function (options) {\r\n\r\n        options = Chartist.extend({}, defaultOptions, options);\r\n\r\n        return function zoom(chart) {\r\n\r\n          if (!(chart instanceof Chartist.Line)) {\r\n            return;\r\n          }\r\n\r\n          var rect, svg, axisX, axisY, chartRect;\r\n          var downPosition;\r\n          var onZoom = options.onZoom;\r\n          var ongoingTouches = [];\r\n\r\n          chart.on('draw', function (data) {\r\n            var type = data.type;\r\n            var mask = type === 'point' ? 'point-mask' : 'line-mask';\r\n            if (type === 'line' || type === 'bar' || type === 'area' || type === 'point') {\r\n              data.element.attr({ 'clip-path': 'url(#' + mask + ')' });\r\n            }\r\n          });\r\n\r\n          chart.on('created', function (data) {\r\n            axisX = data.axisX;\r\n            axisY = data.axisY;\r\n            chartRect = data.chartRect;\r\n            svg = data.svg._node;\r\n            rect = data.svg.elem('rect', {\r\n              x: 10,\r\n              y: 10,\r\n              width: 100,\r\n              height: 100,\r\n            }, 'ct-zoom-rect');\r\n            hide(rect);\r\n\r\n            var defs = data.svg.querySelector('defs') || data.svg.elem('defs');\r\n            var width = chartRect.width();\r\n            var height = chartRect.height();\r\n\r\n            function addMask(id, offset) {\r\n              defs\r\n                .elem('clipPath', {\r\n                  id: id\r\n                })\r\n                .elem('rect', {\r\n                  x: chartRect.x1 - offset,\r\n                  y: chartRect.y2 - offset,\r\n                  width: width + offset + offset,\r\n                  height: height + offset + offset,\r\n                  fill: 'white'\r\n                });\r\n            }\r\n            addMask('line-mask', 0);\r\n            addMask('point-mask', options.pointClipOffset);\r\n\r\n            function on(event, handler) {\r\n              svg.addEventListener(event, handler);\r\n            }\r\n\r\n            on('mousedown', onMouseDown);\r\n            on('mouseup', onMouseUp);\r\n            on('mousemove', onMouseMove);\r\n            on('touchstart', onTouchStart);\r\n            on('touchmove', onTouchMove);\r\n            on('touchend', onTouchEnd);\r\n            on('touchcancel', onTouchCancel);\r\n          });\r\n\r\n\r\n\r\n          function copyTouch(touch) {\r\n            var p = position(touch, svg);\r\n            p.id = touch.identifier;\r\n            return p;\r\n          }\r\n\r\n          function ongoingTouchIndexById(idToFind) {\r\n            for (var i = 0; i < ongoingTouches.length; i++) {\r\n              var id = ongoingTouches[i].id;\r\n              if (id === idToFind) {\r\n                return i;\r\n              }\r\n            }\r\n            return -1;\r\n          }\r\n\r\n          function onTouchStart(event) {\r\n            var touches = event.changedTouches;\r\n            for (var i = 0; i < touches.length; i++) {\r\n              ongoingTouches.push(copyTouch(touches[i]));\r\n            }\r\n\r\n            if (ongoingTouches.length > 1) {\r\n              rect.attr(getRect(ongoingTouches[0], ongoingTouches[1]));\r\n              show(rect);\r\n            }\r\n          }\r\n\r\n          function onTouchMove(event) {\r\n            var touches = event.changedTouches;\r\n            for (var i = 0; i < touches.length; i++) {\r\n              var idx = ongoingTouchIndexById(touches[i].identifier);\r\n              ongoingTouches.splice(idx, 1, copyTouch(touches[i]));\r\n            }\r\n\r\n            if (ongoingTouches.length > 1) {\r\n              rect.attr(getRect(ongoingTouches[0], ongoingTouches[1]));\r\n              show(rect);\r\n              event.preventDefault();\r\n            }\r\n          }\r\n\r\n          function onTouchCancel(event) {\r\n            removeTouches(event.changedTouches);\r\n          }\r\n\r\n          function removeTouches(touches) {\r\n            for (var i = 0; i < touches.length; i++) {\r\n              var idx = ongoingTouchIndexById(touches[i].identifier);\r\n              if (idx >= 0) {\r\n                ongoingTouches.splice(idx, 1);\r\n              }\r\n            }\r\n          }\r\n\r\n          function onTouchEnd(event) {\r\n            if (ongoingTouches.length > 1) {\r\n              zoomIn(getRect(ongoingTouches[0], ongoingTouches[1]));\r\n            }\r\n            removeTouches(event.changedTouches);\r\n            hide(rect);\r\n          }\r\n\r\n          function onMouseDown(event) {\r\n            if (event.button === 0) {\r\n              var point = position(event, svg);\r\n              if (isInRect(point, chartRect)) {\r\n                downPosition = point;\r\n                rect.attr(getRect(downPosition, downPosition));\r\n                show(rect);\r\n                event.preventDefault();\r\n              }\r\n            }\r\n          }\r\n\r\n          function isInRect(point, rect) {\r\n            return point.x >= rect.x1 && point.x <= rect.x2 && point.y >= rect.y2 && point.y <= rect.y1;\r\n          }\r\n\r\n          var reset = function () {\r\n            chart.options.axisX.highLow = null;\r\n            chart.options.axisY.highLow = null;\r\n            chart.update(chart.data, chart.options);\r\n          };\r\n\r\n          function onMouseUp(event) {\r\n            if (event.button === 0 && downPosition) {\r\n              var box = getRect(downPosition, position(event, svg));\r\n              zoomIn(box);\r\n              downPosition = null;\r\n              hide(rect);\r\n            }\r\n            else if (options.resetOnRightMouseBtn && event.button === 2) {\r\n              reset();\r\n              event.preventDefault();\r\n            }\r\n          }\r\n\r\n          function zoomIn(rect) {\r\n            if (rect.width > 5 && rect.height > 5) {\r\n                var x1 = Math.max(0, rect.x - chartRect.x1);\r\n                var x2 = Math.min(chartRect.width(), x1 + rect.width);\r\n                var y2 = Math.min(chartRect.height(), chartRect.y1 - rect.y);\r\n                var y1 = Math.max(0, y2 - rect.height);\r\n\r\n                chart.options.axisX.highLow = { low: project(x1, axisX), high: project(x2, axisX) };\r\n                chart.options.axisY.highLow = { low: project(y1, axisY), high: project(y2, axisY) };\r\n\r\n                chart.update(chart.data, chart.options);\r\n                onZoom && onZoom(chart, reset);\r\n              }\r\n          }\r\n\r\n          function onMouseMove(event) {\r\n            if (downPosition) {\r\n              var point = position(event, svg);\r\n              if (isInRect(point, chartRect)) {\r\n                rect.attr(getRect(downPosition, point));\r\n                event.preventDefault();\r\n              }\r\n            }\r\n          }\r\n        };\r\n\r\n      };\r\n\r\n      function hide(rect) {\r\n        rect.attr({ style: 'display:none' });\r\n      }\r\n\r\n      function show(rect) {\r\n        rect.attr({ style: 'display:block' });\r\n      }\r\n\r\n      function getRect(firstPoint, secondPoint) {\r\n        var x = firstPoint.x;\r\n        var y = firstPoint.y;\r\n        var width = secondPoint.x - x;\r\n        var height = secondPoint.y - y;\r\n        if (width < 0) {\r\n          width = -width;\r\n          x = secondPoint.x;\r\n        }\r\n        if (height < 0) {\r\n          height = -height;\r\n          y = secondPoint.y;\r\n        }\r\n        return {\r\n          x: x,\r\n          y: y,\r\n          width: width,\r\n          height: height\r\n        };\r\n      }\r\n\r\n      function position(event, svg) {\r\n        return transform(event.clientX, event.clientY, svg);\r\n      }\r\n\r\n      function transform(x, y, svgElement) {\r\n        var svg = svgElement.tagName === 'svg' ? svgElement : svgElement.ownerSVGElement;\r\n        var matrix = svg.getScreenCTM();\r\n        var point = svg.createSVGPoint();\r\n        point.x = x;\r\n        point.y = y;\r\n        point = point.matrixTransform(matrix.inverse());\r\n        return point || { x: 0, y: 0 };\r\n      }\r\n\r\n      function project(value, axis) {\r\n        var max = axis.bounds.max;\r\n        var min = axis.bounds.min;\r\n        if (axis.scale && axis.scale.type === 'log') {\r\n          var base = axis.scale.base;\r\n          return Math.pow(base,\r\n            value * baseLog(max / min, base) / axis.axisLength) * min;\r\n        }\r\n        return (value * axis.bounds.range / axis.axisLength) + min;\r\n      }\r\n\r\n      function baseLog(val, base) {\r\n        return Math.log(val) / Math.log(base);\r\n      }\r\n\r\n    } (window, document, Chartist));\r\n\r\n\r\n    return Chartist.plugins.tooltips;\r\n\r\n  }));\n  return Chartist.plugins.zoom;\n\n}));\n"]}