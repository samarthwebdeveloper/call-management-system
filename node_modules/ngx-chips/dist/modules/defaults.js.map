{"version":3,"file":"defaults.js","sourceRoot":"","sources":["../../modules/defaults.ts"],"names":[],"mappings":"AAIA,OAAO,EACH,qBAAqB,EACrB,WAAW,EACb,MAAM,kBAAkB,CAAC;AAwD3B,MAAM,CAAC,IAAM,QAAQ,GAAG;IACpB,QAAQ,EAAmB;QACvB,aAAa,EAAE,EAAE;QACjB,iBAAiB,EAAE,EAAE;QACrB,QAAQ,EAAE,SAAS;QACnB,WAAW,EAAE,WAAW;QACxB,oBAAoB,EAAE,qBAAqB;QAC3C,UAAU,EAAE,EAAE;QACd,eAAe,EAAE,EAAE;QACnB,oBAAoB,EAAE,KAAK;QAC3B,aAAa,EAAE,EAAE;QACjB,KAAK,EAAE,EAAE;QACT,oBAAoB,EAAE,GAAG;QACzB,OAAO,EAAE,SAAS;QAClB,UAAU,EAAE,SAAS;QACrB,WAAW,EAAE,SAAS;QACtB,QAAQ,EAAE,SAAS;QACnB,SAAS,EAAE,SAAS;QACpB,UAAU,EAAE,SAAS;QACrB,iBAAiB,EAAE,GAAG;QACtB,WAAW,EAAE,IAAI;QACjB,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,SAAS;QACnB,UAAU,EAAE,KAAK;QACjB,cAAc,EAAE,KAAK;QACrB,QAAQ,EAAE,IAAI;QACd,MAAM,EAAE,IAAI;QACZ,QAAQ,EAAE,SAAS;QACnB,QAAQ,EAAE,KAAK;QACf,QAAQ,EAAE,SAAS;QACnB,UAAU,EAAE,SAAS;QACrB,QAAQ,EAAE,SAAS;QACnB,SAAS,EAAE,SAAS;QACpB,UAAU,EAAE,OAAO;QACnB,iBAAiB,EAAE;YACf,KAAK,EAAE,OAAO;YACd,KAAK,EAAE,OAAO;SACjB;KACJ;IACD,QAAQ,EAA2B;QAC/B,SAAS,EAAE,SAAS;QACpB,UAAU,EAAE,OAAO;QACnB,YAAY,EAAE,IAAI;QAClB,MAAM,EAAE,MAAM;QACd,iBAAiB,EAAE,KAAK;QACxB,mBAAmB,EAAE,KAAK;QAC1B,iBAAiB,EAAE,CAAC;QACpB,YAAY,EAAE,SAAS;QACvB,UAAU,EAAE,UAAiC,KAAa,EAAE,MAAgB;YACxE,IAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;YAEtD,MAAM,CAAC,WAAW,IAAI,WAAW;iBAC5B,WAAW,EAAE;iBACb,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC;QAC3C,CAAC;KACJ;CACJ,CAAC","sourcesContent":["import { AnimationEntryMetadata } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ValidatorFn, AsyncValidatorFn } from '@angular/forms';\n\nimport { \n    SECONDARY_PLACEHOLDER,\n    PLACEHOLDER\n } from './core/constants';\n\nimport { TagInputDropdown } from './components/dropdown/tag-input-dropdown.component';\nimport { TagModel } from './core';\n\nexport interface TagInputOptions {\n    separatorKeys: string[],\n    separatorKeyCodes: number[],\n    maxItems: number,\n    placeholder: string,\n    secondaryPlaceholder: string,\n    validators: ValidatorFn[],\n    asyncValidators: AsyncValidatorFn[],\n    onlyFromAutocomplete: boolean,\n    errorMessages: { [key: string]: string; },\n    theme: string,\n    onTextChangeDebounce: number,\n    inputId: string,\n    inputClass: string,\n    clearOnBlur: boolean,\n    hideForm: boolean,\n    addOnBlur: boolean,\n    addOnPaste: boolean,\n    pasteSplitPattern: string,\n    blinkIfDupe: boolean,\n    removable: boolean,\n    editable: boolean,\n    allowDupes: boolean,\n    modelAsStrings: boolean,\n    trimTags: boolean,\n    ripple: boolean,\n    tabIndex: string,\n    disabled: boolean,\n    dragZone: string,\n    onRemoving: () => Observable<TagModel>,\n    onAdding: () => Observable<TagModel>,\n    displayBy: string,\n    identifyBy: string,\n    animationDuration: {\n        enter: string,\n        leave: string\n    }\n}\n\nexport interface TagInputDropdownOptions {\n    displayBy: string,\n    identifyBy: string,\n    appendToBody: boolean,\n    offset: string,\n    focusFirstElement: boolean,\n    showDropdownIfEmpty: boolean,\n    minimumTextLength: number,\n    limitItemsTo: number,\n    matchingFn: (value: string, target: TagModel) => boolean;\n}\n\nexport const defaults = {\n    tagInput: <TagInputOptions>{\n        separatorKeys: [],\n        separatorKeyCodes: [],\n        maxItems: undefined,\n        placeholder: PLACEHOLDER,\n        secondaryPlaceholder: SECONDARY_PLACEHOLDER,\n        validators: [],\n        asyncValidators: [],\n        onlyFromAutocomplete: false,\n        errorMessages: {},\n        theme: '',\n        onTextChangeDebounce: 250,\n        inputId: undefined,\n        inputClass: undefined,\n        clearOnBlur: undefined,\n        hideForm: undefined,\n        addOnBlur: undefined,\n        addOnPaste: undefined,\n        pasteSplitPattern: ',',\n        blinkIfDupe: true,\n        removable: true,\n        editable: undefined,\n        allowDupes: false,\n        modelAsStrings: false,\n        trimTags: true,\n        ripple: true,\n        tabIndex: undefined,\n        disabled: false,\n        dragZone: undefined,\n        onRemoving: undefined,\n        onAdding: undefined,\n        displayBy: 'display',\n        identifyBy: 'value',\n        animationDuration: {\n            enter: \"250ms\",\n            leave: \"150ms\"\n        }\n    },\n    dropdown: <TagInputDropdownOptions>{\n        displayBy: 'display',\n        identifyBy: 'value',\n        appendToBody: true,\n        offset: '50 0',\n        focusFirstElement: false,\n        showDropdownIfEmpty: false,\n        minimumTextLength: 1,\n        limitItemsTo: undefined,\n        matchingFn: function(this: TagInputDropdown, value: string, target: TagModel): boolean {\n            const targetValue = target[this.displayBy].toString();\n\n            return targetValue && targetValue\n                .toLowerCase()\n                .indexOf(value.toLowerCase()) >= 0;\n        }\n    }\n};\n"]}