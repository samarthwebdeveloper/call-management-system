import { EventEmitter, TemplateRef, ElementRef, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { TagModel } from '../../core';
import { TagRipple } from '../tag';
export declare class TagComponent {
    element: ElementRef;
    renderer: Renderer2;
    private cdRef;
    model: TagModel;
    removable: boolean;
    editable: boolean;
    template: TemplateRef<any>;
    displayBy: string;
    identifyBy: string;
    index: number;
    hasRipple: boolean;
    disabled: boolean;
    onSelect: EventEmitter<TagModel>;
    onRemove: EventEmitter<TagModel>;
    onBlur: EventEmitter<TagModel>;
    onKeyDown: EventEmitter<any>;
    onTagEdited: EventEmitter<TagModel>;
    readonly readonly: boolean;
    editing: boolean;
    moving: boolean;
    rippleState: string;
    ripple: TagRipple;
    constructor(element: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef);
    select($event?: MouseEvent): void;
    remove($event: MouseEvent): void;
    focus(): void;
    move(): void;
    keydown(event: KeyboardEvent): void;
    blink(): void;
    toggleEditMode(): void;
    onBlurred(event: any): void;
    getDisplayValue(item: TagModel): string;
    readonly isRippleVisible: boolean;
    private getContentEditableText();
    private setContentEditableText(model);
    private activateEditMode();
    private disableEditMode($event?);
    private storeNewValue(input);
    private getContentEditable();
    private isDeleteIconVisible();
}
