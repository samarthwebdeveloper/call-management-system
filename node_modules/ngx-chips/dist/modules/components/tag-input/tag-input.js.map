{"version":3,"file":"tag-input.js","sourceRoot":"","sources":["../../../../modules/components/tag-input/tag-input.ts"],"names":[],"mappings":"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","sourcesContent":["// angular\nimport {\n    Component,\n    forwardRef,\n    HostBinding,\n    Input,\n    Output,\n    EventEmitter,\n    Renderer2,\n    ViewChild,\n    ViewChildren,\n    ContentChildren,\n    ContentChild,\n    OnInit,\n    TemplateRef,\n    QueryList,\n    AfterViewInit,\n    Type\n} from '@angular/core';\n\nimport {\n    AsyncValidatorFn,\n    FormControl,\n    NG_VALUE_ACCESSOR,\n    ValidatorFn\n} from '@angular/forms';\n\n// rx\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\n\n// ng2-tag-input\nimport {\n    TagInputAccessor,\n    TagModel,\n    listen,\n    constants\n} from '../../core';\n\nimport {\n    DragProvider,\n    DraggedTag,\n    OptionsProvider,\n    TagInputOptions\n} from '../../core/providers';\n\nimport {\n    TagInputForm,\n    TagInputDropdown,\n    TagComponent\n} from '../../components';\n\nimport { animations } from './animations';\n\n// angular universal hacks\n/* tslint:disable-next-line */\nconst DragEvent = (global as any).DragEvent;\n\nconst CUSTOM_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TagInputComponent),\n    multi: true\n};\n\nconst defaults: Type<TagInputOptions> = forwardRef(() => OptionsProvider.defaults.tagInput);\n\n@Component({\n    selector: 'tag-input',\n    providers: [CUSTOM_ACCESSOR],\n    styleUrls: ['./tag-input.style.scss'],\n    templateUrl: './tag-input.template.html',\n    animations\n})\nexport class TagInputComponent extends TagInputAccessor implements OnInit, AfterViewInit {\n    \n    /**\n     * @name separatorKeys\n     * @desc keyboard keys with which a user can separate items\n     * @type {Array}\n     */\n    @Input() public separatorKeys: string[] = new defaults().separatorKeys;\n\n    /**\n     * @name separatorKeyCodes\n     * @desc keyboard key codes with which a user can separate items\n     * @type {Array}\n     */\n    @Input() public separatorKeyCodes: number[] = new defaults().separatorKeyCodes;\n\n    /**\n     * @name placeholder\n     * @desc the placeholder of the input text\n     * @type {string}\n     */\n    @Input() public placeholder: string = new defaults().placeholder;\n\n    /**\n     * @name secondaryPlaceholder\n     * @desc placeholder to appear when the input is empty\n     * @type {string}\n     */\n    @Input() public secondaryPlaceholder: string = new defaults().secondaryPlaceholder;\n\n    /**\n     * @name maxItems\n     * @desc maximum number of items that can be added\n     * @type {number}\n     */\n    @Input() public maxItems: number = new defaults().maxItems;\n\n    /**\n     * @name validators\n     * @desc array of Validators that are used to validate the tag before it gets appended to the list\n     * @type {Validators[]}\n     */\n    @Input() public validators: ValidatorFn[] = new defaults().validators;\n\n    /**\n     * @name asyncValidators\n     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list\n     * @type {Array}\n     */\n    @Input() public asyncValidators: AsyncValidatorFn[] = new defaults().asyncValidators;\n\n    /**\n    * - if set to true, it will only possible to add items from the autocomplete\n    * @name onlyFromAutocomplete\n    * @type {Boolean}\n    */\n    @Input() public onlyFromAutocomplete = new defaults().onlyFromAutocomplete;\n\n\t/**\n     * @name errorMessages\n     * @type {Map<string, string>}\n     */\n    @Input() public errorMessages: { [key: string]: string } = new defaults().errorMessages;\n\n    /**\n     * @name theme\n     * @type {string}\n     */\n    @Input() public theme: string = new defaults().theme;\n\n    /**\n     * @name onTextChangeDebounce\n     * @type {number}\n     */\n    @Input() public onTextChangeDebounce = new defaults().onTextChangeDebounce;\n\n    /**\n     * - custom id assigned to the input\n     * @name id\n     */\n    @Input() public inputId: string = new defaults().inputId;\n\n    /**\n     * - custom class assigned to the input\n     */\n    @Input() public inputClass: string = new defaults().inputClass;\n\n    /**\n     * - option to clear text input when the form is blurred\n     * @name clearOnBlur\n     */\n    @Input() public clearOnBlur: boolean = new defaults().clearOnBlur;\n\n    /**\n     * - hideForm\n     * @name clearOnBlur\n     */\n    @Input() public hideForm: boolean = new defaults().hideForm;\n\n    /**\n     * @name addOnBlur\n     */\n    @Input() public addOnBlur: boolean = new defaults().addOnBlur;\n\n    /**\n     * @name addOnPaste\n     */\n    @Input() public addOnPaste: boolean = new defaults().addOnPaste;\n\n    /**\n     * - pattern used with the native method split() to separate patterns in the string pasted\n     * @name pasteSplitPattern\n     */\n    @Input() public pasteSplitPattern = new defaults().pasteSplitPattern;\n\n    /**\n     * @name blinkIfDupe\n     * @type {boolean}\n     */\n    @Input() public blinkIfDupe = new defaults().blinkIfDupe;\n\n    /**\n     * @name removable\n     * @type {boolean}\n     */\n    @Input() public removable = new defaults().removable;\n\n    /**\n     * @name editable\n     * @type {boolean}\n     */\n    @Input() public editable: boolean = new defaults().editable;\n\n    /**\n     * @name allowDupes\n     * @type {boolean}\n     */\n    @Input() public allowDupes = new defaults().allowDupes;\n\n    /**\n     * @description if set to true, the newly added tags will be added as strings, and not objects\n     * @name modelAsStrings\n     * @type {boolean}\n     */\n    @Input() public modelAsStrings = new defaults().modelAsStrings;\n\n    /**\n     * @name trimTags\n     * @type {boolean}\n     */\n    @Input() public trimTags = new defaults().trimTags;\n\n    /**\n     * @name inputText\n     */\n    @Input() public get inputText(): string {\n        return this.inputTextValue;\n    }\n\n    /**\n     * @name ripple\n     * @type {boolean}\n     */\n    @Input() public ripple: boolean = new defaults().ripple;\n\n    /**\n     * @name tabindex\n     * @desc pass through the specified tabindex to the input\n     * @type {string}\n     */\n    @Input() public tabindex: string = new defaults().tabIndex;\n\n    /**\n     * @name disabled\n     * @type {boolean}\n     */\n    @Input() public disabled: boolean = new defaults().disabled;\n\n    /**\n     * @name dragZone\n     * @type {string}\n     */\n    @Input() public dragZone: string = new defaults().dragZone;\n\n    /**\n     * @name onRemoving\n     * @type {() => Observable<void>}\n     */\n    @Input() public onRemoving: (tag: TagModel) => Observable<TagModel> = new defaults().onRemoving;\n\n    /**\n     * @name onAdding\n     * @type {() => Observable<void>}\n     */\n    @Input() public onAdding: (tag: TagModel) => Observable<TagModel> = new defaults().onAdding;\n\n    /**\n     * @name animationDuration\n     */\n    @Input() public animationDuration = new defaults().animationDuration;\n\n    /**\n     * @name onAdd\n     * @desc event emitted when adding a new item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onAdd = new EventEmitter<TagModel>();\n\n    /**\n     * @name onRemove\n     * @desc event emitted when removing an existing item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onRemove = new EventEmitter<TagModel>();\n\n    /**\n     * @name onSelect\n     * @desc event emitted when selecting an item\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onSelect = new EventEmitter<TagModel>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is focused\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onFocus = new EventEmitter<string>();\n\n    /**\n     * @name onFocus\n     * @desc event emitted when the input is blurred\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onBlur = new EventEmitter<string>();\n\n    /**\n     * @name onTextChange\n     * @desc event emitted when the input value changes\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onTextChange = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when text is pasted in the form\n     * @name onPaste\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onPaste = new EventEmitter<string>();\n\n    /**\n     * - output triggered when tag entered is not valid\n     * @name onValidationError\n     * @type {EventEmitter<string>}\n     */\n    @Output() public onValidationError = new EventEmitter<TagModel>();\n\n    /**\n     * - output triggered when tag is edited\n     * @name onTagEdited\n     * @type {EventEmitter<TagModel>}\n     */\n    @Output() public onTagEdited = new EventEmitter<TagModel>();\n\n    /**\n     * @name dropdown\n     */\n    @ContentChild(TagInputDropdown) public dropdown: TagInputDropdown;\n\n    /**\n     * @name template\n     * @desc reference to the template if provided by the user\n     * @type {TemplateRef}\n     */\n    @ContentChildren(TemplateRef, { descendants: false }) public templates: QueryList<TemplateRef<any>>;\n\n\t/**\n     * @name inputForm\n     * @type {TagInputForm}\n     */\n    @ViewChild(TagInputForm) public inputForm: TagInputForm;\n\n    /**\n     * @name selectedTag\n     * @desc reference to the current selected tag\n     * @type {String}\n     */\n    public selectedTag: TagModel;\n\n    /**\n     * @name isLoading\n     * @type {boolean}\n     */\n    public isLoading = false;\n\n    /**\n     * @name inputText\n     * @param text\n     */\n    public set inputText(text: string) {\n        this.inputTextValue = text;\n        this.inputTextChange.emit(text);\n    }\n\n    /**\n     * @name tags\n     * @desc list of Element items\n     */\n    @ViewChildren(TagComponent) public tags: QueryList<TagComponent>;\n\n    /**\n     * @name listeners\n     * @desc array of events that get fired using @fireEvents\n     * @type []\n     */\n    private listeners = {\n        [constants.KEYDOWN]: <{ (fun): any }[]>[],\n        [constants.KEYUP]: <{ (fun): any }[]>[]\n    };\n\n    /**\n     * @description emitter for the 2-way data binding inputText value\n     * @name inputTextChange\n     * @type {EventEmitter}\n     */\n    @Output() public inputTextChange: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * @description private variable to bind get/set\n     * @name inputTextValue\n     * @type {string}\n     */\n    public inputTextValue = '';\n\n    /**\n     * @desc removes the tab index if it is set - it will be passed through to the input\n     * @name tabindexAttr\n     * @type {string}\n     */\n    @HostBinding('attr.tabindex')\n    public get tabindexAttr(): string {\n        return this.tabindex !== undefined ? '-1' : undefined;\n    }\n\n    /**\n     * @name animationMetadata\n     */\n    public animationMetadata: {value: string, params: object};\n\n    constructor(private readonly renderer: Renderer2, \n                public readonly dragProvider: DragProvider) {\n        super();\n    }\n\n    /**\n     * @name onRemoveRequested\n     * @param tag\n     * @param index\n     */\n    public onRemoveRequested(tag: TagModel, index: number): void {\n        if (this.onRemoving) {\n            this.onRemoving(tag)\n                .subscribe((model: TagModel) => {\n                    this.removeItem(model, index);\n                });\n        } else {\n            this.removeItem(tag, index);\n        }\n    }\n\n    /**\n     * @name onAddingRequested\n     * @param isFromAutocomplete {boolean}\n     * @param tag {TagModel}\n     */\n    public onAddingRequested(isFromAutocomplete: boolean, tag: TagModel, index = undefined): void {\n        if (!tag) {\n            return;\n        }\n\n        if (this.onAdding) {\n            this.onAdding(tag)\n                .subscribe((model: TagModel) => {\n                    this.addItem(isFromAutocomplete, model, index);\n                });\n        } else {\n            this.addItem(isFromAutocomplete, tag, index);\n        }\n    }\n\n    /**\n     *\n     * @param tag\n     * @param isFromAutocomplete\n     */\n    public isTagValid(tag: TagModel, fromAutocomplete = false): boolean {\n        const selectedItem = this.dropdown ? this.dropdown.selectedItem : undefined;\n\n        if (selectedItem && !fromAutocomplete) {\n            return;\n        }\n\n        const dupe = this.findDupe(tag, fromAutocomplete);\n\n        // if so, give a visual cue and return false\n        if (!this.allowDupes && dupe && this.blinkIfDupe) {\n            const item = this.tags.find(_tag => {\n                return this.getItemValue(_tag.model) === this.getItemValue(dupe);\n            });\n\n            if (!!item) {\n                item.blink();\n            }\n        }\n\n        const isFromAutocomplete = fromAutocomplete && this.onlyFromAutocomplete;\n\n        const assertions = [\n            // 1. there must be no dupe OR dupes are allowed\n            !dupe || this.allowDupes === true,\n\n            // 2. check max items has not been reached\n            this.maxItemsReached === false,\n\n            // 3. check item comes from autocomplete or onlyFromAutocomplete is false\n            ((isFromAutocomplete) || this.onlyFromAutocomplete === false)\n        ];\n\n        return assertions.filter(item => item).length === assertions.length;\n    }\n\n    /**\n     * @name appendTag\n     * @param tag {TagModel}\n     */\n    public appendTag = (tag: TagModel, index = this.items.length): void => {\n        const items = this.items;\n        const model = this.modelAsStrings ? tag[this.identifyBy] : tag;\n\n        this.items = [...items.slice(0, index), model, ...items.slice(index, items.length)];\n    }\n\n    /**\n     * @name createTag\n     * @param model\n     * @returns {{}}\n     */\n    public createTag = (model: TagModel): TagModel => {\n        const trim = (val: TagModel, key: string): TagModel => {\n            return typeof val === 'string' ? val.trim() : val[key];\n        };\n\n        return {\n            ...typeof model !== 'string' ? model : {},\n            [this.displayBy]: this.trimTags ? trim(model, this.displayBy) : model,\n            [this.identifyBy]: this.trimTags ? trim(model, this.identifyBy) : model\n        };\n    }\n\n    /**\n     * @name selectItem\n     * @desc selects item passed as parameter as the selected tag\n     * @param item\n     * @param emit\n     */\n    public selectItem(item: TagModel, emit = true): void {\n        const isReadonly = item && typeof item !== 'string' && item.readonly;\n        if (isReadonly) {\n            return;\n        }\n\n        this.selectedTag = item;\n\n        if (emit) {\n            this.onSelect.emit(item);\n        }\n    }\n\n    /**\n     * @name fireEvents\n     * @desc goes through the list of the events for a given eventName, and fires each of them\n     * @param eventName\n     * @param $event\n     */\n    public fireEvents(eventName: string, $event?): void {\n        this.listeners[eventName]\n            .forEach(listener => listener.call(this, $event));\n    }\n\n    /**\n     * @name handleKeydown\n     * @desc handles action when the user hits a keyboard key\n     * @param data\n     */\n    public handleKeydown(data: any): void {\n        const event = data.event;\n        const key = event.keyCode || event.which;\n\n        switch (constants.KEY_PRESS_ACTIONS[key]) {\n            case constants.ACTIONS_KEYS.DELETE:\n                if (this.selectedTag && this.removable) {\n                    const index = this.items.indexOf(this.selectedTag);\n                    this.onRemoveRequested(this.selectedTag, index);\n                }\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_PREV:\n                this.switchPrev(data.model);\n                break;\n            case constants.ACTIONS_KEYS.SWITCH_NEXT:\n                this.switchNext(data.model);\n                break;\n            case constants.ACTIONS_KEYS.TAB:\n                this.switchNext(data.model);\n                break;\n            default:\n                return;\n        }\n\n        // prevent default behaviour\n        event.preventDefault();\n    }\n\n    /**\n     * @name setInputValue\n     * @param value\n     * @returns {string}\n     */\n    public setInputValue(value: string): void {\n        const control = this.getControl();\n        \n        // update form value with the transformed item\n        control.setValue(value);\n    }\n\n    /**\n     * @name getControl\n     * @returns {FormControl}\n     */\n    private getControl(): FormControl {\n        return <FormControl>this.inputForm.value;\n    }\n\n\t/**\n     * @name focus\n     * @param applyFocus\n     * @param displayAutocomplete\n     */\n    public focus(applyFocus = false, displayAutocomplete = false): void {\n        if (this.dragProvider.getState('dragging')) {\n            return;\n        }\n\n        this.selectItem(undefined, false);\n\n        if (applyFocus) {\n            this.inputForm.focus();\n            this.onFocus.emit(this.formValue);\n        }\n    }\n\n\t/**\n     * @name blur\n     */\n    public blur(): void {\n        this.onTouched();\n\n        this.onBlur.emit(this.formValue);\n    }\n\n    /**\n     * @name hasErrors\n     * @returns {boolean}\n     */\n    public hasErrors(): boolean {\n        return this.inputForm && this.inputForm.hasErrors();\n    }\n\n    /**\n     * @name isInputFocused\n     * @returns {boolean}\n     */\n    public isInputFocused(): boolean {\n        return this.inputForm && this.inputForm.isInputFocused();\n    }\n\n    /**\n     * - this is the one way I found to tell if the template has been passed and it is not\n     * the template for the menu item\n     * @name hasCustomTemplate\n     */\n    public hasCustomTemplate(): boolean {\n        const templates = this.templates;\n        const template = templates ? templates.first : undefined;\n        const menuTemplate = this.dropdown && this.dropdown.templates ?\n            this.dropdown.templates.first : undefined;\n\n        return template && template !== menuTemplate;\n    }\n\n    /**\n     * @name switchNext\n     * @param item { TagModel }\n     */\n    public switchNext(item: TagModel): void {\n        if (this.tags.last.model === item) {\n            this.focus(true);\n            return;\n        }\n\n        const tags = this.tags.toArray();\n        const tagIndex = tags.findIndex(tag => tag.model === item);\n        const tag = tags[tagIndex + 1];\n\n        tag.select.call(tag);\n    }\n\n    /**\n     * @name switchPrev\n     * @param item { TagModel }\n     */\n    public switchPrev(item: TagModel): void {\n        if (this.tags.first.model !== item) {\n            const tags = this.tags.toArray();\n            const tagIndex = tags.findIndex(tag => tag.model === item);\n            const tag = tags[tagIndex - 1];\n\n            tag.select.call(tag);\n        }\n    }\n\n\t/**\n     * @name maxItemsReached\n     * @returns {boolean}\n     */\n    public get maxItemsReached(): boolean {\n        return this.maxItems !== undefined &&\n            this.items.length >= this.maxItems;\n    }\n\n    /**\n     * @name formValue\n     * @return {any}\n     */\n    public get formValue(): string {\n        return this.inputForm.value.value;\n    }\n\n    /**\n     * @name ngOnInit\n     */\n    public ngOnInit(): void {\n        // if the number of items specified in the model is > of the value of maxItems\n        // degrade gracefully and let the max number of items to be the number of items in the model\n        // though, warn the user.\n        const hasReachedMaxItems = this.maxItems !== undefined &&\n            this.items &&\n            this.items.length > this.maxItems;\n\n        if (hasReachedMaxItems) {\n            this.maxItems = this.items.length;\n            console.warn(constants.MAX_ITEMS_WARNING);\n        }\n\n\t    // Setting editable to false to fix problem with tags in IE still being editable when\n\t    // onlyFromAutocomplete is true\n\t\tif (this.onlyFromAutocomplete) {\n\t\t\tthis.editable = false;\n\t\t}\n    }\n\n    /**3\n     * @name onDragStarted\n     * @param event\n     * @param index\n     */\n    public onDragStarted(event: DragEvent, tag: TagModel, index: number): void {\n        event.stopPropagation();\n\n        const item = { zone: this.dragZone, tag, index } as DraggedTag;\n        \n        this.dragProvider.setSender(this);\n        this.dragProvider.setDraggedItem(event, item);\n        this.dragProvider.setState({dragging: true, index});\n    }\n\n    /**\n     * @name onDragOver\n     * @param event\n     */\n    public onDragOver(event: DragEvent, index?: number): void {\n        this.dragProvider.setState({dropping: true});\n        this.dragProvider.setReceiver(this);\n\n        event.preventDefault();\n    }\n\n    /**\n     * @name onTagDropped\n     * @param event\n     * @param index\n     */\n    public onTagDropped(event: DragEvent, index: number): void {\n        const item = this.dragProvider.getDraggedItem(event);\n\n        if (item.zone !== this.dragZone) {\n            return;\n        }\n        \n        this.dragProvider.onTagDropped(item.tag, item.index, index);\n    \n        event.preventDefault();\n        event.stopPropagation();\n    }\n\n    /**\n     * @name isDropping\n     */\n    public isDropping(): boolean {\n        return this.dragProvider.getState('dropping') && this.dragProvider.receiver === this;\n    }\n\n    /**\n     * @name ngAfterViewInit\n     */\n    public ngAfterViewInit(): void {\n        // set up listeners\n\n        this.setUpKeypressListeners();\n        this.setupSeparatorKeysListener();\n        this.setUpInputKeydownListeners();\n\n        if (this.onTextChange.observers.length) {\n            this.setUpTextChangeSubscriber();\n        }\n\n        // if clear on blur is set to true, subscribe to the event and clear the text's form\n        if (this.clearOnBlur || this.addOnBlur) {\n            this.setUpOnBlurSubscriber();\n        }\n\n        // if addOnPaste is set to true, register the handler and add items\n        if (this.addOnPaste) {\n            this.setUpOnPasteListener();\n        }\n\n        // if hideForm is set to true, remove the input\n        if (this.hideForm) {\n            this.inputForm.destroy();\n        }\n\n        this.animationMetadata = {\n            value: 'in',\n            params: {...this.animationDuration}\n        };\n    }\n\n    /**\n     * @name onTagBlurred\n     * @param changedElement {TagModel}\n     * @param index {number}\n     */\n    public onTagBlurred(changedElement: TagModel, index: number): void {\n        this.items[index] = changedElement;\n        this.blur();\n    }\n\n    /**\n     * @name trackBy\n     * @param item\n     * @returns {string}\n     */\n    public trackBy(item: TagModel): string {\n        return item[this.identifyBy];\n    }\n\n    /**\n     * @name removeItem\n     * @desc removes an item from the array of the model\n     * @param tag {TagModel}\n     * @param index {number}\n     */\n    private removeItem(tag: TagModel, index: number): void {\n        this.items = this.getItemsWithout(index);\n\n        // if the removed tag was selected, set it as undefined\n        if (this.selectedTag === tag) {\n            this.selectItem(undefined, false);\n        }\n\n        // focus input\n        this.focus(true, false);\n\n        // emit remove event\n        this.onRemove.emit(tag);\n    }\n\n    /**\n     * @name addItem\n     * @desc adds the current text model to the items array\n     * @param fromAutocomplete\n     * @param item\n     */\n    private addItem(fromAutocomplete = false, item: TagModel, index = undefined): void {\n        const model = this.getItemDisplay(item);\n        \n        /**\n         * @name reset\n         */\n        const reset = (): void => {\n            // reset control and focus input\n            this.setInputValue('');\n\n            // focus input\n            this.focus(true, false);\n        };\n\n        /**\n         * @name validationFilter\n         * @param tag\n         * @return {boolean}\n         */\n        const validationFilter = (tag: TagModel): boolean => {\n            const isValid = this.isTagValid(tag, fromAutocomplete) && this.inputForm.form.valid;\n\n            if (!isValid) {\n                this.onValidationError.emit(tag);\n            }\n\n            return isValid;\n        };\n\n        /**\n         * @name subscribeFn\n         * @param tag\n         */\n        const subscribeFn = (tag: TagModel): void => {\n            this.appendTag(tag, index);\n\n            if (this.dropdown && this.dropdown.isVisible) {\n                const dropdown = this.dropdown.dropdown;\n                dropdown.hide();\n            }\n            \n            // emit event\n            this.onAdd.emit(tag);\n        };\n\n        Observable\n            .of(model)\n            .filter(() => model.trim() !== '')\n            .map(() => item)\n            .map(this.createTag)\n            .filter(validationFilter)\n            .subscribe(subscribeFn, undefined, reset);\n    }\n\n    /**\n     * @name setupSeparatorKeysListener\n     */\n    private setupSeparatorKeysListener(): void {\n        const useSeparatorKeys = this.separatorKeyCodes.length > 0 || this.separatorKeys.length > 0;\n\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            const hasKeyCode = this.separatorKeyCodes.indexOf($event.keyCode) >= 0;\n            const hasKey = this.separatorKeys.indexOf($event.key) >= 0;\n\n            if (hasKeyCode || hasKey) {\n                $event.preventDefault();\n                this.onAddingRequested(false, this.formValue);\n            }\n\n        }, useSeparatorKeys);\n    }\n\n    /**\n     * @name setUpKeypressListeners\n     */\n    private setUpKeypressListeners(): void {\n        // setting up the keypress listeners\n        listen.call(this, constants.KEYDOWN, ($event) => {\n            const isCorrectKey = $event.keyCode === 37 || $event.keyCode === 8;\n\n            if (isCorrectKey &&\n                !this.formValue &&\n                this.items.length) {\n                this.tags.last.select.call(this.tags.last);\n            }\n        });\n    }\n\n    /**\n     * @name setUpKeydownListeners\n     */\n    private setUpInputKeydownListeners(): void {\n        this.inputForm.onKeydown.subscribe(event => {\n            this.fireEvents('keydown', event);\n\n            if (event.key === 'Backspace' && this.formValue === '') {\n                event.preventDefault();\n            }\n        });\n    }\n\n    /**\n     * @name setUpOnPasteListener\n     */\n    private setUpOnPasteListener(): void {\n        const input = this.inputForm.input.nativeElement;\n\n        // attach listener to input\n        this.renderer.listen(input, 'paste', this.onPasteCallback.bind(this));\n    }\n\n    /**\n     * @name setUpTextChangeSubscriber\n     */\n    private setUpTextChangeSubscriber(): void {\n        this.inputForm.form.valueChanges\n            .debounceTime(this.onTextChangeDebounce)\n            .subscribe(() => this.onTextChange.emit(this.formValue));\n    }\n\n    /**\n     * @name setUpOnBlurSubscriber\n     */\n    private setUpOnBlurSubscriber(): void {\n        const filterFn = (): boolean => {\n            return !(this.dropdown && this.dropdown.isVisible) && !!this.formValue;\n        };\n\n        this.inputForm\n            .onBlur\n            .filter(filterFn)\n            .subscribe(() => {\n                if (this.addOnBlur) {\n                    this.onAddingRequested(false, this.formValue);\n                }\n\n                this.setInputValue('');\n            });\n    }\n\n    /**\n     * @name findDupe\n     * @param tag\n     * @param isFromAutocomplete\n     * @return {undefined|TagModel}\n     */\n    private findDupe(tag: TagModel, isFromAutocomplete: boolean): TagModel {\n        const identifyBy = isFromAutocomplete ? this.dropdown.identifyBy : this.identifyBy;\n        return this.items\n            .find((item: TagModel) => {\n                return this.getItemValue(item) === tag[identifyBy];\n            });\n    }\n\n    /**\n     * @name onPasteCallback\n     * @param data\n     */\n    private onPasteCallback(data: ClipboardEvent): void {\n        const text = data.clipboardData.getData('text/plain');\n\n        text.split(this.pasteSplitPattern)\n            .map(item => this.createTag(item))\n            .forEach(item => this.onAddingRequested(false, item));\n\n        this.onPaste.emit(text);\n\n        setTimeout(() => this.setInputValue(''), 0);\n    }\n}\n"]}