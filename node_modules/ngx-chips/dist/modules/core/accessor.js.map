{"version":3,"file":"accessor.js","sourceRoot":"","sources":["../../../modules/core/accessor.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACtC,OAAO,EAAE,eAAe,EAAE,MAAM,aAAa,CAAC;AAI9C,MAAM,mBAAmB,GAAQ;IAC7B,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,GAAG,CAAC,CAAC;AAC/B,CAAC;AAED;IAAA;QACY,WAAM,GAAe,EAAE,CAAC;QAQhB,cAAS,GAAW,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC;QAMhE,eAAU,GAAW,eAAe,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;IAqDtF,CAAC;IAnDG,sBAAW,mCAAK;aAAhB;YACI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;aAED,UAAiB,KAAiB;YAC9B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,CAAC;;;OALA;IAAA,CAAC;IAOK,oCAAS,GAAhB;QACI,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC9B,CAAC;IAEM,qCAAU,GAAjB,UAAkB,KAAY;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,IAAI,EAAE,CAAC;IAC9B,CAAC;IAEM,2CAAgB,GAAvB,UAAwB,EAAO;QAC3B,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAChC,CAAC;IAEM,4CAAiB,GAAxB,UAAyB,EAAO;QAC5B,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IACjC,CAAC;IAOM,uCAAY,GAAnB,UAAoB,IAAc;QAC9B,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;IACzD,CAAC;IAOM,yCAAc,GAArB,UAAsB,IAAc;QAChC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;IACxD,CAAC;IAOS,0CAAe,GAAzB,UAA0B,KAAa;QACnC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,QAAQ,KAAK,KAAK,EAAlB,CAAkB,CAAC,CAAC;IACrE,CAAC;IACL,uBAAC;AAAD,CAAC,AApED,IAoEC;;AA3DY;IAAR,KAAK,EAAE;;mDAAwE;AAMvE;IAAR,KAAK,EAAE;;oDAA0E","sourcesContent":["import { defaults } from './../defaults';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Input } from '@angular/core';\nimport { OptionsProvider } from './providers';\n\nexport type TagModel = string | {[key: string]: any};\n\nexport function isObject(obj: any): boolean {\n    return obj === Object(obj);\n}\n\nexport class TagInputAccessor implements ControlValueAccessor {\n    private _items: TagModel[] = [];\n    private _onTouchedCallback: () => void;\n    private _onChangeCallback: (items: TagModel[]) => void;\n\n    /**\n     * @name displayBy\n     * @type {string}\n     */\n    @Input() public displayBy: string = OptionsProvider.defaults.tagInput.displayBy;\n\n    /**\n     * @name identifyBy\n     * @type {string}\n     */\n    @Input() public identifyBy: string = OptionsProvider.defaults.tagInput.identifyBy;\n\n    public get items(): TagModel[] {\n        return this._items;\n    };\n\n    public set items(items: TagModel[]) {\n        this._items = items;\n        this._onChangeCallback(this._items);\n    }\n\n    public onTouched() {\n        this._onTouchedCallback();\n    }\n\n    public writeValue(items: any[]) {\n        this._items = items || [];\n    }\n\n    public registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    /**\n     * @name getItemValue\n     * @param item\n     * @return {TagModel}\n     */\n    public getItemValue(item: TagModel): string {\n        return isObject(item) ? item[this.identifyBy] : item;\n    }\n\n    /**\n     * @name getItemDisplay\n     * @param item\n     * @return {TagModel}\n     */\n    public getItemDisplay(item: TagModel): string {\n        return isObject(item) ? item[this.displayBy] : item;\n    }\n\n    /**\n     * @name getItemsWithout\n     * @param index\n     * @return {TagModel[]}\n     */\n    protected getItemsWithout(index: number): TagModel[] {\n        return this.items.filter((item, position) => position !== index);\n    }\n}\n"]}