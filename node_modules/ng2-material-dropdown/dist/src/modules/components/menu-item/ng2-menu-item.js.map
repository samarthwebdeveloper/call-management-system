{"version":3,"sources":["../../../../../src/modules/components/menu-item/ng2-menu-item.ts"],"names":[],"mappings":"AAAA,OAAO,EACH,SAAS,EACT,KAAK,EACL,QAAQ,EACR,UAAU,EACb,MAAM,eAAA,CAAgB;AAEvB,OAAO,EAAE,oBAAA,EAAqB,MAAO,uCAAA,CAAwC;AAG7E;IAeI,qBAAoB,KAA2B,EAC3B,OAAmB,EACnB,QAAkB;QAFlB,UAAK,GAAL,KAAK,CAAsB;QAC3B,YAAO,GAAP,OAAO,CAAY;QACnB,aAAQ,GAAR,QAAQ,CAAU;QAX9B,iBAAY,GAAY,KAAK,CAAC;IAWG,CAAC;IAO1C,sBAAW,mCAAU;aAArB;YACI,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC;QAC1D,CAAC;;;OAAA;IAMM,4BAAM,GAAb,UAAc,MAAO;QACjB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAE5C,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;YACT,MAAM,CAAC,eAAe,EAAE,CAAC;YACzB,MAAM,CAAC,cAAc,EAAE,CAAC;QAC5B,CAAC;IACL,CAAC;IAMM,2BAAK,GAAZ;QACI,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACtD,CAAC;IAKM,2BAAK,GAAZ;QACI,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;IACvF,CAAC;IAkBL,kBAAC;AAAD,CAxEA,AAwEC;;AAjBM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,eAAe;gBACzB,SAAS,EAAE,CAAE,cAAc,CAAE;gBAC7B,WAAW,EAAE,iBAAiB;aACjC,EAAG,EAAE;CACL,CAAC;AAEK,0BAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,oBAAoB,GAAG;IAC9B,EAAC,IAAI,EAAE,UAAU,GAAG;IACpB,EAAC,IAAI,EAAE,QAAQ,GAAG;CACjB,EAJ6F,CAI7F,CAAC;AACK,0BAAc,GAA2C;IAChE,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAClC,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CAC1B,CAAC","file":"ng2-menu-item.js","sourceRoot":"","sourcesContent":["import {\n    Component,\n    Input,\n    Renderer,\n    ElementRef\n} from '@angular/core';\n\nimport { DropdownStateService } from '../../services/dropdown-state.service';\n\n\nexport class Ng2MenuItem {\n    /**\n     * @preventClose\n     * @desc if true, clicking on the item won't close the dropdown\n     * @type {boolean}\n     */\n     public preventClose: boolean = false;\n\n    /**\n     * @name value\n     * @desc any value associated to the item\n     * @type {any}\n     */\n     public value: any;\n\n    constructor(private state: DropdownStateService,\n                private element: ElementRef,\n                private renderer: Renderer) {}\n\n    /**\n     * @name isSelected\n     * @desc returns current selected item\n     * @returns {boolean}\n     */\n    public get isSelected(): boolean {\n        return this === this.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name click\n     * @desc emits select event\n     */\n    public select($event?): void {\n        this.state.dropdownState.select(this, true);\n\n        if ($event) {\n            $event.stopPropagation();\n            $event.preventDefault();\n        }\n    }\n\n    /**\n     * @name click\n     * @desc emits click event\n     */\n    public click(): void {\n        this.state.dropdownState.onItemClicked.emit(this);\n    }\n\n    /**\n     * @name focus\n     */\n    public focus() {\n        this.renderer.invokeElementMethod(this.element.nativeElement.children[0], 'focus');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'ng2-menu-item',\n    styleUrls: [ './style.scss' ],\n    templateUrl: './template.html'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DropdownStateService, },\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'preventClose': [{ type: Input },],\n'value': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}